import math

#어떤 일을 할수 있을지,
#ㄴ 그것을 하기 위해 무엇이 필요한지

class Point:
    ''' 2차원 공간의 점을 나타내는 클래스 '''
    
    def __init__(self , x = 0 , y = 0):
        ''' Point클래스의 initializer( 초기화 메서드 )로 
        Point 클래스의 객체를 생성할 때 자동적으로 실행된다.
        매개변수 x , y 를 통해 새로 생성되는 점의 좌표를 지정한다.
        지정하지 않으면 default로 원점이 된다.
        '''
    
        self.x = x
        self.y = y
        
    def move(self , x , y):
        '''점의 좌표를 매개변수 x,y에 전달된 값으로
        변경하는 메소드 이다.
        '''
        self.x = x
        self.y = y
        
    def reset(self):
        ''' 점을 원점으로 되돌리는 메소드'''
        self.move(0,0)
        
    def calculate_distance(self, other_point):
        '''매개변수 other_point로 전달된 점과의 유클리드 거리를 계산해주는 메소드'''
        return math.sqrt((self.x - other_point.x)**2 + (self.y - other_point.y)**2)
    
class Point3D(Point):
    ''' 3차원 공간의 점을 나타내는 클래스 '''
    def __init__(self , x = 0 , y = 0 , z = 0):
        Point.__init__(self , x , y)
        self.z = z
        
    def move(self , x , y , z):
        Point.move(x,y)
        self.z = z
        
    def reset(self):
        self.move(0,0,0)
        
    def calculate_distance(self, other_point3D):
        return math.sqrt((self.x - other_point3D.x)**2
                         +(self.y - other_point3D.y)**2
                         +(self.z - other_point3D.z)**2)

